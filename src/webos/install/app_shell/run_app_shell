#!/bin/sh

PmLogCtl def chrome.runscript warning
PmLogCtl logkv chrome.runscript info launchTime place=start_chrome
######################################################################
                 #      Environment Variables       #
######################################################################

export TMPDIR="/tmp"
export BROWSER_APP_ID=""
export APP_FOLDER_PATH=""
export EXTRA_PARAMS_JSON="{}"
# Setup 4Mb limitation mse audio buffer size
export MSE_AUDIO_BUFFER_SIZE_LIMIT=4194304
# Setup 50Mb limitation mse video buffer size
export MSE_VIDEO_BUFFER_SIZE_LIMIT=52428800
# Setup override_user_agent_string
export OVERRIDE_USER_AGENT_STRING="Mozilla/5.0 (Web0S; Linux) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.0 Safari/537.36"
# Setup MAX gpu limit
export MAX_GPU_MEM_LIMIT=60
# setup 32Mb maximum for DiskCache
export APPSHELL_DISKCACHE_MAXSIZE=33554432

while [[ "$1" != ""  &&  "$2" != "" ]]; do
    PARAM=$1
    VALUE=$2
    case $PARAM in
        --appid)
            BROWSER_APP_ID=$VALUE
            ;;
        --folder)
            APP_FOLDER_PATH=$VALUE
            ;;
        --params)
            EXTRA_PARAMS_JSON=$VALUE
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            exit 1
            ;;
    esac
    shift
    shift
done

# Set proxy configurations to system environments
if [ -e "/etc/webos/webruntime/extra_conf.sh" ] ; then
    . /etc/webos/webruntime/extra_conf.sh || :
fi

if [ -z ${APP_FOLDER_PATH} ]; then
    echo "ERROR: --folder info not provided \"$@\""
    exit 1
fi

if [ -z ${BROWSER_APP_ID} ]; then
    echo "ERROR: --appid info not provided \"$@\""
    exit 1
fi

if test -d ${XDG_RUNTIME_DIR}; then
  export XDG_RUNTIME_DIR="${TMPDIR}/xdg"
fi

DEPLOY_DIR=$(dirname $(readlink -f $0))

USER_CACHE_CONF=${DEPLOY_DIR}/user_cachedir_conf
if [ -f ${USER_CACHE_CONF} ]; then
    CACHE_DIR=`cat ${USER_CACHE_CONF}`
else
    CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}"
fi

FONT_CONFIG_CONF=${DEPLOY_DIR}/font_config_conf.sh
if [ -x ${FONT_CONFIG_CONF} ]; then
    . ${FONT_CONFIG_CONF}
fi

CHROME_CACHE="${CACHE_DIR}/app_shell"

EXTRA_PARAMS_JSON=$(node -e "
params = JSON.parse('$EXTRA_PARAMS_JSON');
if(!('override_user_agent_string' in params)) {
    params['override_user_agent_string'] = '$OVERRIDE_USER_AGENT_STRING'
}
params['hide_exit_button'] = false;
console.log(JSON.stringify(params));
")

######################################################################
                #      Target Environment          #
######################################################################
PmLogCtl logkv chrome.runscript info launchTime place=start_env

# temp code for security issue
chmod -R 777 ${CHROME_CACHE}
rm -f ${CHROME_CACHE}/Singleton*
rm -rf ${TMPDIR}/.org.chromium.*

######################################################################
                 #      Runtime Configuration       #
######################################################################

# Enable blink features
ENABLE_BLINK_FEATURES="MediaSourceIsSupportedExtension"

CHROME_COMPOSITING_FLAGS=" \
  --enable-accelerated-compositing\
  --enable-smooth-scrolling\
"

CHROME_LS2_NAME_FLAG=""
if test -n ${LS2_NAME}; then
  CHROME_LS2_NAME_FLAG="--webos-luna-service-name=${LS2_NAME}"
fi

CHROME_DISPLAY_FLAG=""
if test -n ${DISPLAY_ID}; then
  CHROME_DISPLAY_FLAG="--webos-displayid=${DISPLAY_ID}"
  CHROME_CACHE="${CHROME_CACHE}-${DISPLAY_ID}"
fi

CHROME_FLAGS=" \
  --allow-scripts-to-close-windows\
  --always-authorize-plugins\
  --autoplay-policy=no-user-gesture-required\
  --process-per-guest-webview\
  --disable-component-update\
  --disable-gpu-watchdog\
  --disable-in-process-stack-traces\
  --disable-infobars\
  --disable-new-video-renderer\
  --disable-translate\
  --enable-blink-features=${ENABLE_BLINK_FEATURES}\
  --enable-clear-cached-fonts\
  --enable-file-cookies\
  --enable-neva-ime\
  --enable-neva-user-agent-client-hints\
  --gpu-no-context-lost\
  --ignore-gpu-blocklist\
  --in-process-gpu\
  --max-timeupdate-event-frequency=150\
  --mse-audio-buffer-size-limit=${MSE_AUDIO_BUFFER_SIZE_LIMIT}\
  --mse-video-buffer-size-limit=${MSE_VIDEO_BUFFER_SIZE_LIMIT}\
  --noerrdialogs\
  --no-sandbox\
  --no-zygote\
  --start-maximized\
  --user-data-dir=${CHROME_CACHE}\
  --webos-appid=${BROWSER_APP_ID}\
  ${CHROME_DISPLAY_FLAG}\
  --load-apps=${APP_FOLDER_PATH}\
  --v8-snapshot-blob-path=${APP_FOLDER_PATH}/snapshot_blob.bin\
  --ozone-platform=wayland\
"
CHROME_FLAGS="${CHROME_FLAGS} ${CHROME_LS2_NAME_FLAG}"

# TODO(neva): Temporary workaround. Remove it when the root cause of broken SVG
# images in webOS/OSE is fixed. See http://clm.lge.com/issue/browse/NEVA-7083
CHROME_FLAGS="${CHROME_FLAGS} --disable-gpu-rasterization"

if [ -f /var/luna/preferences/devmode_enabled -a -f /var/luna/preferences/debug_system_apps ]; then
    DEBUG_FLAGS="--remote-debugging-port=9999"
fi

MEM_FLAGS=" \
  --enable-aggressive-foreground-gc\
  --decoded-image-working-set-budget-mb=96\
  --mem-pressure-gpu-cache-size-reduction-factor=4\
  --tile-manager-low-mem-policy-bytes-limit-reduction-factor=2\
  --shared-mem-minimal-limit-mb=8\
  --shared-mem-pressure-divider=4\
  --shared-mem-system-mem-reduction-factor=10\
  --force-gpu-mem-available-mb=${MAX_GPU_MEM_LIMIT}\
"

TUNING_FLAGS=" \
  --disk-cache-size=${APPSHELL_DISKCACHE_MAXSIZE} \
"

CHROME_FLAGS="${CHROME_COMPOSITING_FLAGS} ${CHROME_FLAGS} ${MEM_FLAGS} ${TUNING_FLAGS}"

JS_FLAGS=" \
  --configure_heap_details\
  --heap_growing_percent=1\
  --minimum_allocation_limit_growing_step_size=2\
  --high_fragmentation_slack=0\
  --external_allocation_hard_limit=64\
  --external_allocation_soft_limit=16\
"

EXTRA_CONF=${CACHE_DIR}/extra_conf
if [ -f ${EXTRA_CONF} ]; then
    source ${EXTRA_CONF}
    echo "CHROME_FLAGS=${CHROME_FLAGS}"
fi

PmLogCtl logkv chrome.runscript info launchTime place=call_chrome

######################################################################
                #      Launch AppShell           #
# REPLACE * is used to fill the compiled source version automatically #
# So, should not be removed.
######################################################################

echo ""
echo "----------------------------------------------------------------------"
echo "                       Launching App Shell                          "
### REPLACE URL ###
### REPLACE REVISION ###
### REPLACE BUILD TIME ###
echo "----------------------------------------------------------------------"
echo ""

exec ${DEPLOY_DIR}/app_shell ${CHROME_FLAGS} ${DEBUG_FLAGS} --launch-args="${EXTRA_PARAMS_JSON}" --js-flags="${JS_FLAGS}" "$@"
